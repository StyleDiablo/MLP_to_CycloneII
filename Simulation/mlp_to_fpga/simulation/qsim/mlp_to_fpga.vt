// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/01/2024 15:05:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cyNet
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cyNet_vlg_sample_tst(
	axis_in_data,
	axis_in_data_valid,
	s_axi_aclk,
	s_axi_araddr,
	s_axi_aresetn,
	s_axi_arprot,
	s_axi_arvalid,
	s_axi_awaddr,
	s_axi_awprot,
	s_axi_awvalid,
	s_axi_bready,
	s_axi_rready,
	s_axi_wdata,
	s_axi_wstrb,
	s_axi_wvalid,
	sampler_tx
);
input [31:0] axis_in_data;
input  axis_in_data_valid;
input  s_axi_aclk;
input [4:0] s_axi_araddr;
input  s_axi_aresetn;
input [2:0] s_axi_arprot;
input  s_axi_arvalid;
input [4:0] s_axi_awaddr;
input [2:0] s_axi_awprot;
input  s_axi_awvalid;
input  s_axi_bready;
input  s_axi_rready;
input [31:0] s_axi_wdata;
input [3:0] s_axi_wstrb;
input  s_axi_wvalid;
output sampler_tx;

reg sample;
time current_time;
always @(axis_in_data or axis_in_data_valid or s_axi_aclk or s_axi_araddr or s_axi_aresetn or s_axi_arprot or s_axi_arvalid or s_axi_awaddr or s_axi_awprot or s_axi_awvalid or s_axi_bready or s_axi_rready or s_axi_wdata or s_axi_wstrb or s_axi_wvalid)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cyNet_vlg_check_tst (
	axis_in_data_ready,
	intr,
	s_axi_arready,
	s_axi_awready,
	s_axi_bresp,
	s_axi_bvalid,
	s_axi_rdata,
	s_axi_rresp,
	s_axi_rvalid,
	s_axi_wready,
	sampler_rx
);
input  axis_in_data_ready;
input  intr;
input  s_axi_arready;
input  s_axi_awready;
input [1:0] s_axi_bresp;
input  s_axi_bvalid;
input [31:0] s_axi_rdata;
input [1:0] s_axi_rresp;
input  s_axi_rvalid;
input  s_axi_wready;
input sampler_rx;

reg  axis_in_data_ready_expected;
reg  intr_expected;
reg  s_axi_arready_expected;
reg  s_axi_awready_expected;
reg [1:0] s_axi_bresp_expected;
reg  s_axi_bvalid_expected;
reg [31:0] s_axi_rdata_expected;
reg [1:0] s_axi_rresp_expected;
reg  s_axi_rvalid_expected;
reg  s_axi_wready_expected;

reg  axis_in_data_ready_prev;
reg  intr_prev;
reg  s_axi_arready_prev;
reg  s_axi_awready_prev;
reg [1:0] s_axi_bresp_prev;
reg  s_axi_bvalid_prev;
reg [31:0] s_axi_rdata_prev;
reg [1:0] s_axi_rresp_prev;
reg  s_axi_rvalid_prev;
reg  s_axi_wready_prev;

reg  axis_in_data_ready_expected_prev;
reg  intr_expected_prev;
reg  s_axi_arready_expected_prev;
reg  s_axi_awready_expected_prev;
reg [1:0] s_axi_bresp_expected_prev;
reg  s_axi_bvalid_expected_prev;
reg [31:0] s_axi_rdata_expected_prev;
reg [1:0] s_axi_rresp_expected_prev;
reg  s_axi_rvalid_expected_prev;
reg  s_axi_wready_expected_prev;

reg  last_axis_in_data_ready_exp;
reg  last_intr_exp;
reg  last_s_axi_arready_exp;
reg  last_s_axi_awready_exp;
reg [1:0] last_s_axi_bresp_exp;
reg  last_s_axi_bvalid_exp;
reg [31:0] last_s_axi_rdata_exp;
reg [1:0] last_s_axi_rresp_exp;
reg  last_s_axi_rvalid_exp;
reg  last_s_axi_wready_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	axis_in_data_ready_prev = axis_in_data_ready;
	intr_prev = intr;
	s_axi_arready_prev = s_axi_arready;
	s_axi_awready_prev = s_axi_awready;
	s_axi_bresp_prev = s_axi_bresp;
	s_axi_bvalid_prev = s_axi_bvalid;
	s_axi_rdata_prev = s_axi_rdata;
	s_axi_rresp_prev = s_axi_rresp;
	s_axi_rvalid_prev = s_axi_rvalid;
	s_axi_wready_prev = s_axi_wready;
end

// update expected /o prevs

always @(trigger)
begin
	axis_in_data_ready_expected_prev = axis_in_data_ready_expected;
	intr_expected_prev = intr_expected;
	s_axi_arready_expected_prev = s_axi_arready_expected;
	s_axi_awready_expected_prev = s_axi_awready_expected;
	s_axi_bresp_expected_prev = s_axi_bresp_expected;
	s_axi_bvalid_expected_prev = s_axi_bvalid_expected;
	s_axi_rdata_expected_prev = s_axi_rdata_expected;
	s_axi_rresp_expected_prev = s_axi_rresp_expected;
	s_axi_rvalid_expected_prev = s_axi_rvalid_expected;
	s_axi_wready_expected_prev = s_axi_wready_expected;
end



// expected axis_in_data_ready
initial
begin
	axis_in_data_ready_expected = 1'bX;
	axis_in_data_ready_expected = #999000 1'b0;
end 

// expected intr
initial
begin
	intr_expected = 1'bX;
	intr_expected = #999000 1'b0;
end 

// expected s_axi_arready
initial
begin
	s_axi_arready_expected = 1'bX;
	s_axi_arready_expected = #999000 1'b0;
end 

// expected s_axi_awready
initial
begin
	s_axi_awready_expected = 1'bX;
	s_axi_awready_expected = #999000 1'b0;
end 
// expected s_axi_bresp[ 1 ]
initial
begin
	s_axi_bresp_expected[1] = 1'bX;
	s_axi_bresp_expected[1] = #999000 1'b0;
end 
// expected s_axi_bresp[ 0 ]
initial
begin
	s_axi_bresp_expected[0] = 1'bX;
	s_axi_bresp_expected[0] = #999000 1'b0;
end 

// expected s_axi_bvalid
initial
begin
	s_axi_bvalid_expected = 1'bX;
	s_axi_bvalid_expected = #999000 1'b0;
end 
// expected s_axi_rdata[ 31 ]
initial
begin
	s_axi_rdata_expected[31] = 1'bX;
	s_axi_rdata_expected[31] = #999000 1'b0;
end 
// expected s_axi_rdata[ 30 ]
initial
begin
	s_axi_rdata_expected[30] = 1'bX;
	s_axi_rdata_expected[30] = #999000 1'b0;
end 
// expected s_axi_rdata[ 29 ]
initial
begin
	s_axi_rdata_expected[29] = 1'bX;
	s_axi_rdata_expected[29] = #999000 1'b0;
end 
// expected s_axi_rdata[ 28 ]
initial
begin
	s_axi_rdata_expected[28] = 1'bX;
	s_axi_rdata_expected[28] = #999000 1'b0;
end 
// expected s_axi_rdata[ 27 ]
initial
begin
	s_axi_rdata_expected[27] = 1'bX;
	s_axi_rdata_expected[27] = #999000 1'b0;
end 
// expected s_axi_rdata[ 26 ]
initial
begin
	s_axi_rdata_expected[26] = 1'bX;
	s_axi_rdata_expected[26] = #999000 1'b0;
end 
// expected s_axi_rdata[ 25 ]
initial
begin
	s_axi_rdata_expected[25] = 1'bX;
	s_axi_rdata_expected[25] = #999000 1'b0;
end 
// expected s_axi_rdata[ 24 ]
initial
begin
	s_axi_rdata_expected[24] = 1'bX;
	s_axi_rdata_expected[24] = #999000 1'b0;
end 
// expected s_axi_rdata[ 23 ]
initial
begin
	s_axi_rdata_expected[23] = 1'bX;
	s_axi_rdata_expected[23] = #999000 1'b0;
end 
// expected s_axi_rdata[ 22 ]
initial
begin
	s_axi_rdata_expected[22] = 1'bX;
	s_axi_rdata_expected[22] = #999000 1'b0;
end 
// expected s_axi_rdata[ 21 ]
initial
begin
	s_axi_rdata_expected[21] = 1'bX;
	s_axi_rdata_expected[21] = #999000 1'b0;
end 
// expected s_axi_rdata[ 20 ]
initial
begin
	s_axi_rdata_expected[20] = 1'bX;
	s_axi_rdata_expected[20] = #999000 1'b0;
end 
// expected s_axi_rdata[ 19 ]
initial
begin
	s_axi_rdata_expected[19] = 1'bX;
	s_axi_rdata_expected[19] = #999000 1'b0;
end 
// expected s_axi_rdata[ 18 ]
initial
begin
	s_axi_rdata_expected[18] = 1'bX;
	s_axi_rdata_expected[18] = #999000 1'b0;
end 
// expected s_axi_rdata[ 17 ]
initial
begin
	s_axi_rdata_expected[17] = 1'bX;
	s_axi_rdata_expected[17] = #999000 1'b0;
end 
// expected s_axi_rdata[ 16 ]
initial
begin
	s_axi_rdata_expected[16] = 1'bX;
	s_axi_rdata_expected[16] = #999000 1'b0;
end 
// expected s_axi_rdata[ 15 ]
initial
begin
	s_axi_rdata_expected[15] = 1'bX;
	s_axi_rdata_expected[15] = #999000 1'b0;
end 
// expected s_axi_rdata[ 14 ]
initial
begin
	s_axi_rdata_expected[14] = 1'bX;
	s_axi_rdata_expected[14] = #999000 1'b0;
end 
// expected s_axi_rdata[ 13 ]
initial
begin
	s_axi_rdata_expected[13] = 1'bX;
	s_axi_rdata_expected[13] = #999000 1'b0;
end 
// expected s_axi_rdata[ 12 ]
initial
begin
	s_axi_rdata_expected[12] = 1'bX;
	s_axi_rdata_expected[12] = #999000 1'b0;
end 
// expected s_axi_rdata[ 11 ]
initial
begin
	s_axi_rdata_expected[11] = 1'bX;
	s_axi_rdata_expected[11] = #999000 1'b0;
end 
// expected s_axi_rdata[ 10 ]
initial
begin
	s_axi_rdata_expected[10] = 1'bX;
	s_axi_rdata_expected[10] = #999000 1'b0;
end 
// expected s_axi_rdata[ 9 ]
initial
begin
	s_axi_rdata_expected[9] = 1'bX;
	s_axi_rdata_expected[9] = #999000 1'b0;
end 
// expected s_axi_rdata[ 8 ]
initial
begin
	s_axi_rdata_expected[8] = 1'bX;
	s_axi_rdata_expected[8] = #999000 1'b0;
end 
// expected s_axi_rdata[ 7 ]
initial
begin
	s_axi_rdata_expected[7] = 1'bX;
	s_axi_rdata_expected[7] = #999000 1'b0;
end 
// expected s_axi_rdata[ 6 ]
initial
begin
	s_axi_rdata_expected[6] = 1'bX;
	s_axi_rdata_expected[6] = #999000 1'b0;
end 
// expected s_axi_rdata[ 5 ]
initial
begin
	s_axi_rdata_expected[5] = 1'bX;
	s_axi_rdata_expected[5] = #999000 1'b0;
end 
// expected s_axi_rdata[ 4 ]
initial
begin
	s_axi_rdata_expected[4] = 1'bX;
	s_axi_rdata_expected[4] = #999000 1'b0;
end 
// expected s_axi_rdata[ 3 ]
initial
begin
	s_axi_rdata_expected[3] = 1'bX;
	s_axi_rdata_expected[3] = #999000 1'b0;
end 
// expected s_axi_rdata[ 2 ]
initial
begin
	s_axi_rdata_expected[2] = 1'bX;
	s_axi_rdata_expected[2] = #999000 1'b0;
end 
// expected s_axi_rdata[ 1 ]
initial
begin
	s_axi_rdata_expected[1] = 1'bX;
	s_axi_rdata_expected[1] = #999000 1'b0;
end 
// expected s_axi_rdata[ 0 ]
initial
begin
	s_axi_rdata_expected[0] = 1'bX;
	s_axi_rdata_expected[0] = #999000 1'b0;
end 
// expected s_axi_rresp[ 1 ]
initial
begin
	s_axi_rresp_expected[1] = 1'bX;
	s_axi_rresp_expected[1] = #999000 1'b0;
end 
// expected s_axi_rresp[ 0 ]
initial
begin
	s_axi_rresp_expected[0] = 1'bX;
	s_axi_rresp_expected[0] = #999000 1'b0;
end 

// expected s_axi_rvalid
initial
begin
	s_axi_rvalid_expected = 1'bX;
	s_axi_rvalid_expected = #999000 1'b0;
end 

// expected s_axi_wready
initial
begin
	s_axi_wready_expected = 1'bX;
	s_axi_wready_expected = #999000 1'b0;
end 
// generate trigger
always @(axis_in_data_ready_expected or axis_in_data_ready or intr_expected or intr or s_axi_arready_expected or s_axi_arready or s_axi_awready_expected or s_axi_awready or s_axi_bresp_expected or s_axi_bresp or s_axi_bvalid_expected or s_axi_bvalid or s_axi_rdata_expected or s_axi_rdata or s_axi_rresp_expected or s_axi_rresp or s_axi_rvalid_expected or s_axi_rvalid or s_axi_wready_expected or s_axi_wready)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected axis_in_data_ready = %b | expected intr = %b | expected s_axi_arready = %b | expected s_axi_awready = %b | expected s_axi_bresp = %b | expected s_axi_bvalid = %b | expected s_axi_rdata = %b | expected s_axi_rresp = %b | expected s_axi_rvalid = %b | expected s_axi_wready = %b | ",axis_in_data_ready_expected_prev,intr_expected_prev,s_axi_arready_expected_prev,s_axi_awready_expected_prev,s_axi_bresp_expected_prev,s_axi_bvalid_expected_prev,s_axi_rdata_expected_prev,s_axi_rresp_expected_prev,s_axi_rvalid_expected_prev,s_axi_wready_expected_prev);
	$display("| real axis_in_data_ready = %b | real intr = %b | real s_axi_arready = %b | real s_axi_awready = %b | real s_axi_bresp = %b | real s_axi_bvalid = %b | real s_axi_rdata = %b | real s_axi_rresp = %b | real s_axi_rvalid = %b | real s_axi_wready = %b | ",axis_in_data_ready_prev,intr_prev,s_axi_arready_prev,s_axi_awready_prev,s_axi_bresp_prev,s_axi_bvalid_prev,s_axi_rdata_prev,s_axi_rresp_prev,s_axi_rvalid_prev,s_axi_wready_prev);
`endif
	if (
		( axis_in_data_ready_expected_prev !== 1'bx ) && ( axis_in_data_ready_prev !== axis_in_data_ready_expected_prev )
		&& ((axis_in_data_ready_expected_prev !== last_axis_in_data_ready_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port axis_in_data_ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", axis_in_data_ready_expected_prev);
		$display ("     Real value = %b", axis_in_data_ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_axis_in_data_ready_exp = axis_in_data_ready_expected_prev;
	end
	if (
		( intr_expected_prev !== 1'bx ) && ( intr_prev !== intr_expected_prev )
		&& ((intr_expected_prev !== last_intr_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port intr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", intr_expected_prev);
		$display ("     Real value = %b", intr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_intr_exp = intr_expected_prev;
	end
	if (
		( s_axi_arready_expected_prev !== 1'bx ) && ( s_axi_arready_prev !== s_axi_arready_expected_prev )
		&& ((s_axi_arready_expected_prev !== last_s_axi_arready_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_arready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_arready_expected_prev);
		$display ("     Real value = %b", s_axi_arready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_axi_arready_exp = s_axi_arready_expected_prev;
	end
	if (
		( s_axi_awready_expected_prev !== 1'bx ) && ( s_axi_awready_prev !== s_axi_awready_expected_prev )
		&& ((s_axi_awready_expected_prev !== last_s_axi_awready_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_awready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_awready_expected_prev);
		$display ("     Real value = %b", s_axi_awready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_axi_awready_exp = s_axi_awready_expected_prev;
	end
	if (
		( s_axi_bresp_expected_prev[0] !== 1'bx ) && ( s_axi_bresp_prev[0] !== s_axi_bresp_expected_prev[0] )
		&& ((s_axi_bresp_expected_prev[0] !== last_s_axi_bresp_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_bresp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_bresp_expected_prev);
		$display ("     Real value = %b", s_axi_bresp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_s_axi_bresp_exp[0] = s_axi_bresp_expected_prev[0];
	end
	if (
		( s_axi_bresp_expected_prev[1] !== 1'bx ) && ( s_axi_bresp_prev[1] !== s_axi_bresp_expected_prev[1] )
		&& ((s_axi_bresp_expected_prev[1] !== last_s_axi_bresp_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_bresp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_bresp_expected_prev);
		$display ("     Real value = %b", s_axi_bresp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_s_axi_bresp_exp[1] = s_axi_bresp_expected_prev[1];
	end
	if (
		( s_axi_bvalid_expected_prev !== 1'bx ) && ( s_axi_bvalid_prev !== s_axi_bvalid_expected_prev )
		&& ((s_axi_bvalid_expected_prev !== last_s_axi_bvalid_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_bvalid :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_bvalid_expected_prev);
		$display ("     Real value = %b", s_axi_bvalid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s_axi_bvalid_exp = s_axi_bvalid_expected_prev;
	end
	if (
		( s_axi_rdata_expected_prev[0] !== 1'bx ) && ( s_axi_rdata_prev[0] !== s_axi_rdata_expected_prev[0] )
		&& ((s_axi_rdata_expected_prev[0] !== last_s_axi_rdata_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[0] = s_axi_rdata_expected_prev[0];
	end
	if (
		( s_axi_rdata_expected_prev[1] !== 1'bx ) && ( s_axi_rdata_prev[1] !== s_axi_rdata_expected_prev[1] )
		&& ((s_axi_rdata_expected_prev[1] !== last_s_axi_rdata_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[1] = s_axi_rdata_expected_prev[1];
	end
	if (
		( s_axi_rdata_expected_prev[2] !== 1'bx ) && ( s_axi_rdata_prev[2] !== s_axi_rdata_expected_prev[2] )
		&& ((s_axi_rdata_expected_prev[2] !== last_s_axi_rdata_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[2] = s_axi_rdata_expected_prev[2];
	end
	if (
		( s_axi_rdata_expected_prev[3] !== 1'bx ) && ( s_axi_rdata_prev[3] !== s_axi_rdata_expected_prev[3] )
		&& ((s_axi_rdata_expected_prev[3] !== last_s_axi_rdata_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[3] = s_axi_rdata_expected_prev[3];
	end
	if (
		( s_axi_rdata_expected_prev[4] !== 1'bx ) && ( s_axi_rdata_prev[4] !== s_axi_rdata_expected_prev[4] )
		&& ((s_axi_rdata_expected_prev[4] !== last_s_axi_rdata_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[4] = s_axi_rdata_expected_prev[4];
	end
	if (
		( s_axi_rdata_expected_prev[5] !== 1'bx ) && ( s_axi_rdata_prev[5] !== s_axi_rdata_expected_prev[5] )
		&& ((s_axi_rdata_expected_prev[5] !== last_s_axi_rdata_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[5] = s_axi_rdata_expected_prev[5];
	end
	if (
		( s_axi_rdata_expected_prev[6] !== 1'bx ) && ( s_axi_rdata_prev[6] !== s_axi_rdata_expected_prev[6] )
		&& ((s_axi_rdata_expected_prev[6] !== last_s_axi_rdata_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[6] = s_axi_rdata_expected_prev[6];
	end
	if (
		( s_axi_rdata_expected_prev[7] !== 1'bx ) && ( s_axi_rdata_prev[7] !== s_axi_rdata_expected_prev[7] )
		&& ((s_axi_rdata_expected_prev[7] !== last_s_axi_rdata_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[7] = s_axi_rdata_expected_prev[7];
	end
	if (
		( s_axi_rdata_expected_prev[8] !== 1'bx ) && ( s_axi_rdata_prev[8] !== s_axi_rdata_expected_prev[8] )
		&& ((s_axi_rdata_expected_prev[8] !== last_s_axi_rdata_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[8] = s_axi_rdata_expected_prev[8];
	end
	if (
		( s_axi_rdata_expected_prev[9] !== 1'bx ) && ( s_axi_rdata_prev[9] !== s_axi_rdata_expected_prev[9] )
		&& ((s_axi_rdata_expected_prev[9] !== last_s_axi_rdata_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[9] = s_axi_rdata_expected_prev[9];
	end
	if (
		( s_axi_rdata_expected_prev[10] !== 1'bx ) && ( s_axi_rdata_prev[10] !== s_axi_rdata_expected_prev[10] )
		&& ((s_axi_rdata_expected_prev[10] !== last_s_axi_rdata_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[10] = s_axi_rdata_expected_prev[10];
	end
	if (
		( s_axi_rdata_expected_prev[11] !== 1'bx ) && ( s_axi_rdata_prev[11] !== s_axi_rdata_expected_prev[11] )
		&& ((s_axi_rdata_expected_prev[11] !== last_s_axi_rdata_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[11] = s_axi_rdata_expected_prev[11];
	end
	if (
		( s_axi_rdata_expected_prev[12] !== 1'bx ) && ( s_axi_rdata_prev[12] !== s_axi_rdata_expected_prev[12] )
		&& ((s_axi_rdata_expected_prev[12] !== last_s_axi_rdata_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[12] = s_axi_rdata_expected_prev[12];
	end
	if (
		( s_axi_rdata_expected_prev[13] !== 1'bx ) && ( s_axi_rdata_prev[13] !== s_axi_rdata_expected_prev[13] )
		&& ((s_axi_rdata_expected_prev[13] !== last_s_axi_rdata_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[13] = s_axi_rdata_expected_prev[13];
	end
	if (
		( s_axi_rdata_expected_prev[14] !== 1'bx ) && ( s_axi_rdata_prev[14] !== s_axi_rdata_expected_prev[14] )
		&& ((s_axi_rdata_expected_prev[14] !== last_s_axi_rdata_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[14] = s_axi_rdata_expected_prev[14];
	end
	if (
		( s_axi_rdata_expected_prev[15] !== 1'bx ) && ( s_axi_rdata_prev[15] !== s_axi_rdata_expected_prev[15] )
		&& ((s_axi_rdata_expected_prev[15] !== last_s_axi_rdata_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[15] = s_axi_rdata_expected_prev[15];
	end
	if (
		( s_axi_rdata_expected_prev[16] !== 1'bx ) && ( s_axi_rdata_prev[16] !== s_axi_rdata_expected_prev[16] )
		&& ((s_axi_rdata_expected_prev[16] !== last_s_axi_rdata_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[16] = s_axi_rdata_expected_prev[16];
	end
	if (
		( s_axi_rdata_expected_prev[17] !== 1'bx ) && ( s_axi_rdata_prev[17] !== s_axi_rdata_expected_prev[17] )
		&& ((s_axi_rdata_expected_prev[17] !== last_s_axi_rdata_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[17] = s_axi_rdata_expected_prev[17];
	end
	if (
		( s_axi_rdata_expected_prev[18] !== 1'bx ) && ( s_axi_rdata_prev[18] !== s_axi_rdata_expected_prev[18] )
		&& ((s_axi_rdata_expected_prev[18] !== last_s_axi_rdata_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[18] = s_axi_rdata_expected_prev[18];
	end
	if (
		( s_axi_rdata_expected_prev[19] !== 1'bx ) && ( s_axi_rdata_prev[19] !== s_axi_rdata_expected_prev[19] )
		&& ((s_axi_rdata_expected_prev[19] !== last_s_axi_rdata_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[19] = s_axi_rdata_expected_prev[19];
	end
	if (
		( s_axi_rdata_expected_prev[20] !== 1'bx ) && ( s_axi_rdata_prev[20] !== s_axi_rdata_expected_prev[20] )
		&& ((s_axi_rdata_expected_prev[20] !== last_s_axi_rdata_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[20] = s_axi_rdata_expected_prev[20];
	end
	if (
		( s_axi_rdata_expected_prev[21] !== 1'bx ) && ( s_axi_rdata_prev[21] !== s_axi_rdata_expected_prev[21] )
		&& ((s_axi_rdata_expected_prev[21] !== last_s_axi_rdata_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[21] = s_axi_rdata_expected_prev[21];
	end
	if (
		( s_axi_rdata_expected_prev[22] !== 1'bx ) && ( s_axi_rdata_prev[22] !== s_axi_rdata_expected_prev[22] )
		&& ((s_axi_rdata_expected_prev[22] !== last_s_axi_rdata_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[22] = s_axi_rdata_expected_prev[22];
	end
	if (
		( s_axi_rdata_expected_prev[23] !== 1'bx ) && ( s_axi_rdata_prev[23] !== s_axi_rdata_expected_prev[23] )
		&& ((s_axi_rdata_expected_prev[23] !== last_s_axi_rdata_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[23] = s_axi_rdata_expected_prev[23];
	end
	if (
		( s_axi_rdata_expected_prev[24] !== 1'bx ) && ( s_axi_rdata_prev[24] !== s_axi_rdata_expected_prev[24] )
		&& ((s_axi_rdata_expected_prev[24] !== last_s_axi_rdata_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[24] = s_axi_rdata_expected_prev[24];
	end
	if (
		( s_axi_rdata_expected_prev[25] !== 1'bx ) && ( s_axi_rdata_prev[25] !== s_axi_rdata_expected_prev[25] )
		&& ((s_axi_rdata_expected_prev[25] !== last_s_axi_rdata_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[25] = s_axi_rdata_expected_prev[25];
	end
	if (
		( s_axi_rdata_expected_prev[26] !== 1'bx ) && ( s_axi_rdata_prev[26] !== s_axi_rdata_expected_prev[26] )
		&& ((s_axi_rdata_expected_prev[26] !== last_s_axi_rdata_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[26] = s_axi_rdata_expected_prev[26];
	end
	if (
		( s_axi_rdata_expected_prev[27] !== 1'bx ) && ( s_axi_rdata_prev[27] !== s_axi_rdata_expected_prev[27] )
		&& ((s_axi_rdata_expected_prev[27] !== last_s_axi_rdata_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[27] = s_axi_rdata_expected_prev[27];
	end
	if (
		( s_axi_rdata_expected_prev[28] !== 1'bx ) && ( s_axi_rdata_prev[28] !== s_axi_rdata_expected_prev[28] )
		&& ((s_axi_rdata_expected_prev[28] !== last_s_axi_rdata_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[28] = s_axi_rdata_expected_prev[28];
	end
	if (
		( s_axi_rdata_expected_prev[29] !== 1'bx ) && ( s_axi_rdata_prev[29] !== s_axi_rdata_expected_prev[29] )
		&& ((s_axi_rdata_expected_prev[29] !== last_s_axi_rdata_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[29] = s_axi_rdata_expected_prev[29];
	end
	if (
		( s_axi_rdata_expected_prev[30] !== 1'bx ) && ( s_axi_rdata_prev[30] !== s_axi_rdata_expected_prev[30] )
		&& ((s_axi_rdata_expected_prev[30] !== last_s_axi_rdata_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[30] = s_axi_rdata_expected_prev[30];
	end
	if (
		( s_axi_rdata_expected_prev[31] !== 1'bx ) && ( s_axi_rdata_prev[31] !== s_axi_rdata_expected_prev[31] )
		&& ((s_axi_rdata_expected_prev[31] !== last_s_axi_rdata_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rdata[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rdata_expected_prev);
		$display ("     Real value = %b", s_axi_rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s_axi_rdata_exp[31] = s_axi_rdata_expected_prev[31];
	end
	if (
		( s_axi_rresp_expected_prev[0] !== 1'bx ) && ( s_axi_rresp_prev[0] !== s_axi_rresp_expected_prev[0] )
		&& ((s_axi_rresp_expected_prev[0] !== last_s_axi_rresp_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rresp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rresp_expected_prev);
		$display ("     Real value = %b", s_axi_rresp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s_axi_rresp_exp[0] = s_axi_rresp_expected_prev[0];
	end
	if (
		( s_axi_rresp_expected_prev[1] !== 1'bx ) && ( s_axi_rresp_prev[1] !== s_axi_rresp_expected_prev[1] )
		&& ((s_axi_rresp_expected_prev[1] !== last_s_axi_rresp_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rresp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rresp_expected_prev);
		$display ("     Real value = %b", s_axi_rresp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s_axi_rresp_exp[1] = s_axi_rresp_expected_prev[1];
	end
	if (
		( s_axi_rvalid_expected_prev !== 1'bx ) && ( s_axi_rvalid_prev !== s_axi_rvalid_expected_prev )
		&& ((s_axi_rvalid_expected_prev !== last_s_axi_rvalid_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_rvalid :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_rvalid_expected_prev);
		$display ("     Real value = %b", s_axi_rvalid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_s_axi_rvalid_exp = s_axi_rvalid_expected_prev;
	end
	if (
		( s_axi_wready_expected_prev !== 1'bx ) && ( s_axi_wready_prev !== s_axi_wready_expected_prev )
		&& ((s_axi_wready_expected_prev !== last_s_axi_wready_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_axi_wready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_axi_wready_expected_prev);
		$display ("     Real value = %b", s_axi_wready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_s_axi_wready_exp = s_axi_wready_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cyNet_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] axis_in_data;
reg axis_in_data_valid;
reg s_axi_aclk;
reg [4:0] s_axi_araddr;
reg s_axi_aresetn;
reg [2:0] s_axi_arprot;
reg s_axi_arvalid;
reg [4:0] s_axi_awaddr;
reg [2:0] s_axi_awprot;
reg s_axi_awvalid;
reg s_axi_bready;
reg s_axi_rready;
reg [31:0] s_axi_wdata;
reg [3:0] s_axi_wstrb;
reg s_axi_wvalid;
// wires                                               
wire axis_in_data_ready;
wire intr;
wire s_axi_arready;
wire s_axi_awready;
wire [1:0] s_axi_bresp;
wire s_axi_bvalid;
wire [31:0] s_axi_rdata;
wire [1:0] s_axi_rresp;
wire s_axi_rvalid;
wire s_axi_wready;

wire sampler;                             

// assign statements (if any)                          
cyNet i1 (
// port map - connection between master ports and signals/registers   
	.axis_in_data(axis_in_data),
	.axis_in_data_ready(axis_in_data_ready),
	.axis_in_data_valid(axis_in_data_valid),
	.intr(intr),
	.s_axi_aclk(s_axi_aclk),
	.s_axi_araddr(s_axi_araddr),
	.s_axi_aresetn(s_axi_aresetn),
	.s_axi_arprot(s_axi_arprot),
	.s_axi_arready(s_axi_arready),
	.s_axi_arvalid(s_axi_arvalid),
	.s_axi_awaddr(s_axi_awaddr),
	.s_axi_awprot(s_axi_awprot),
	.s_axi_awready(s_axi_awready),
	.s_axi_awvalid(s_axi_awvalid),
	.s_axi_bready(s_axi_bready),
	.s_axi_bresp(s_axi_bresp),
	.s_axi_bvalid(s_axi_bvalid),
	.s_axi_rdata(s_axi_rdata),
	.s_axi_rready(s_axi_rready),
	.s_axi_rresp(s_axi_rresp),
	.s_axi_rvalid(s_axi_rvalid),
	.s_axi_wdata(s_axi_wdata),
	.s_axi_wready(s_axi_wready),
	.s_axi_wstrb(s_axi_wstrb),
	.s_axi_wvalid(s_axi_wvalid)
);
// axis_in_data[ 31 ]
initial
begin
	axis_in_data[31] = 1'b0;
end 
// axis_in_data[ 30 ]
initial
begin
	axis_in_data[30] = 1'b0;
end 
// axis_in_data[ 29 ]
initial
begin
	axis_in_data[29] = 1'b0;
end 
// axis_in_data[ 28 ]
initial
begin
	axis_in_data[28] = 1'b0;
end 
// axis_in_data[ 27 ]
initial
begin
	axis_in_data[27] = 1'b0;
end 
// axis_in_data[ 26 ]
initial
begin
	axis_in_data[26] = 1'b0;
end 
// axis_in_data[ 25 ]
initial
begin
	axis_in_data[25] = 1'b0;
end 
// axis_in_data[ 24 ]
initial
begin
	axis_in_data[24] = 1'b0;
end 
// axis_in_data[ 23 ]
initial
begin
	axis_in_data[23] = 1'b0;
end 
// axis_in_data[ 22 ]
initial
begin
	axis_in_data[22] = 1'b0;
end 
// axis_in_data[ 21 ]
initial
begin
	axis_in_data[21] = 1'b0;
end 
// axis_in_data[ 20 ]
initial
begin
	axis_in_data[20] = 1'b0;
end 
// axis_in_data[ 19 ]
initial
begin
	axis_in_data[19] = 1'b0;
end 
// axis_in_data[ 18 ]
initial
begin
	axis_in_data[18] = 1'b0;
end 
// axis_in_data[ 17 ]
initial
begin
	axis_in_data[17] = 1'b0;
end 
// axis_in_data[ 16 ]
initial
begin
	axis_in_data[16] = 1'b0;
end 
// axis_in_data[ 15 ]
initial
begin
	axis_in_data[15] = 1'b0;
end 
// axis_in_data[ 14 ]
initial
begin
	axis_in_data[14] = 1'b0;
end 
// axis_in_data[ 13 ]
initial
begin
	axis_in_data[13] = 1'b0;
end 
// axis_in_data[ 12 ]
initial
begin
	axis_in_data[12] = 1'b0;
end 
// axis_in_data[ 11 ]
initial
begin
	axis_in_data[11] = 1'b0;
end 
// axis_in_data[ 10 ]
initial
begin
	axis_in_data[10] = 1'b0;
end 
// axis_in_data[ 9 ]
initial
begin
	axis_in_data[9] = 1'b0;
end 
// axis_in_data[ 8 ]
initial
begin
	axis_in_data[8] = 1'b0;
end 
// axis_in_data[ 7 ]
initial
begin
	axis_in_data[7] = 1'b0;
end 
// axis_in_data[ 6 ]
initial
begin
	axis_in_data[6] = 1'b0;
end 
// axis_in_data[ 5 ]
initial
begin
	axis_in_data[5] = 1'b0;
end 
// axis_in_data[ 4 ]
initial
begin
	axis_in_data[4] = 1'b0;
	axis_in_data[4] = #800000 1'b1;
	axis_in_data[4] = #199000 1'b0;
end 
// axis_in_data[ 3 ]
initial
begin
	axis_in_data[3] = 1'b0;
	axis_in_data[3] = #400000 1'b1;
	axis_in_data[3] = #400000 1'b0;
end 
// axis_in_data[ 2 ]
initial
begin
	repeat(2)
	begin
		axis_in_data[2] = 1'b0;
		axis_in_data[2] = #200000 1'b1;
		# 200000;
	end
	axis_in_data[2] = 1'b0;
end 
// axis_in_data[ 1 ]
initial
begin
	repeat(4)
	begin
		axis_in_data[1] = 1'b0;
		axis_in_data[1] = #100000 1'b1;
		# 100000;
	end
	axis_in_data[1] = 1'b0;
	axis_in_data[1] = #100000 1'b1;
	axis_in_data[1] = #99000 1'b0;
end 
// axis_in_data[ 0 ]
initial
begin
	repeat(9)
	begin
		axis_in_data[0] = 1'b0;
		axis_in_data[0] = #50000 1'b1;
		# 50000;
	end
	axis_in_data[0] = 1'b0;
	axis_in_data[0] = #50000 1'b1;
	axis_in_data[0] = #49000 1'b0;
end 

// axis_in_data_valid
initial
begin
	repeat(4)
	begin
		axis_in_data_valid = 1'b0;
		axis_in_data_valid = #100000 1'b1;
		# 100000;
	end
	axis_in_data_valid = 1'b0;
	axis_in_data_valid = #100000 1'b1;
	axis_in_data_valid = #99000 1'b0;
end 

// s_axi_aclk
initial
begin
	repeat(49)
	begin
		s_axi_aclk = 1'b0;
		s_axi_aclk = #10000 1'b1;
		# 10000;
	end
	s_axi_aclk = 1'b0;
	s_axi_aclk = #10000 1'b1;
	s_axi_aclk = #9000 1'b0;
end 
// s_axi_araddr[ 4 ]
initial
begin
	s_axi_araddr[4] = 1'b0;
end 
// s_axi_araddr[ 3 ]
initial
begin
	s_axi_araddr[3] = 1'b0;
end 
// s_axi_araddr[ 2 ]
initial
begin
	s_axi_araddr[2] = 1'b0;
	s_axi_araddr[2] = #800000 1'b1;
	s_axi_araddr[2] = #199000 1'b0;
end 
// s_axi_araddr[ 1 ]
initial
begin
	s_axi_araddr[1] = 1'b0;
	s_axi_araddr[1] = #400000 1'b1;
	s_axi_araddr[1] = #400000 1'b0;
end 
// s_axi_araddr[ 0 ]
initial
begin
	repeat(2)
	begin
		s_axi_araddr[0] = 1'b0;
		s_axi_araddr[0] = #200000 1'b1;
		# 200000;
	end
	s_axi_araddr[0] = 1'b0;
end 

// s_axi_aresetn
initial
begin
	s_axi_aresetn = 1'b0;
end 
// s_axi_arprot[ 2 ]
initial
begin
	s_axi_arprot[2] = 1'b0;
end 
// s_axi_arprot[ 1 ]
initial
begin
	s_axi_arprot[1] = 1'b0;
	s_axi_arprot[1] = #500000 1'b1;
	s_axi_arprot[1] = #499000 1'b0;
end 
// s_axi_arprot[ 0 ]
initial
begin
	s_axi_arprot[0] = 1'b0;
	s_axi_arprot[0] = #250000 1'b1;
	s_axi_arprot[0] = #250000 1'b0;
	s_axi_arprot[0] = #250000 1'b1;
	s_axi_arprot[0] = #249000 1'b0;
end 

// s_axi_arvalid
initial
begin
	s_axi_arvalid = 1'b0;
end 
// s_axi_awaddr[ 4 ]
initial
begin
	s_axi_awaddr[4] = 1'b0;
end 
// s_axi_awaddr[ 3 ]
initial
begin
	s_axi_awaddr[3] = 1'b0;
end 
// s_axi_awaddr[ 2 ]
initial
begin
	s_axi_awaddr[2] = 1'b0;
end 
// s_axi_awaddr[ 1 ]
initial
begin
	s_axi_awaddr[1] = 1'b0;
	s_axi_awaddr[1] = #600000 1'b1;
	s_axi_awaddr[1] = #399000 1'b0;
end 
// s_axi_awaddr[ 0 ]
initial
begin
	s_axi_awaddr[0] = 1'b0;
	s_axi_awaddr[0] = #300000 1'b1;
	s_axi_awaddr[0] = #300000 1'b0;
	s_axi_awaddr[0] = #300000 1'b1;
	s_axi_awaddr[0] = #99000 1'b0;
end 
// s_axi_awprot[ 2 ]
initial
begin
	s_axi_awprot[2] = 1'b0;
end 
// s_axi_awprot[ 1 ]
initial
begin
	s_axi_awprot[1] = 1'b0;
	s_axi_awprot[1] = #700000 1'b1;
	s_axi_awprot[1] = #299000 1'b0;
end 
// s_axi_awprot[ 0 ]
initial
begin
	s_axi_awprot[0] = 1'b0;
	s_axi_awprot[0] = #350000 1'b1;
	s_axi_awprot[0] = #350000 1'b0;
end 

// s_axi_awvalid
initial
begin
	s_axi_awvalid = 1'b0;
	s_axi_awvalid = #400000 1'b1;
	s_axi_awvalid = #400000 1'b0;
end 

// s_axi_bready
initial
begin
	s_axi_bready = 1'b0;
	s_axi_bready = #450000 1'b1;
	s_axi_bready = #450000 1'b0;
end 

// s_axi_rready
initial
begin
	s_axi_rready = 1'b0;
	s_axi_rready = #500000 1'b1;
	s_axi_rready = #499000 1'b0;
end 
// s_axi_wdata[ 31 ]
initial
begin
	s_axi_wdata[31] = 1'b0;
end 
// s_axi_wdata[ 30 ]
initial
begin
	s_axi_wdata[30] = 1'b0;
end 
// s_axi_wdata[ 29 ]
initial
begin
	s_axi_wdata[29] = 1'b0;
end 
// s_axi_wdata[ 28 ]
initial
begin
	s_axi_wdata[28] = 1'b0;
end 
// s_axi_wdata[ 27 ]
initial
begin
	s_axi_wdata[27] = 1'b0;
end 
// s_axi_wdata[ 26 ]
initial
begin
	s_axi_wdata[26] = 1'b0;
end 
// s_axi_wdata[ 25 ]
initial
begin
	s_axi_wdata[25] = 1'b0;
end 
// s_axi_wdata[ 24 ]
initial
begin
	s_axi_wdata[24] = 1'b0;
end 
// s_axi_wdata[ 23 ]
initial
begin
	s_axi_wdata[23] = 1'b0;
end 
// s_axi_wdata[ 22 ]
initial
begin
	s_axi_wdata[22] = 1'b0;
end 
// s_axi_wdata[ 21 ]
initial
begin
	s_axi_wdata[21] = 1'b0;
end 
// s_axi_wdata[ 20 ]
initial
begin
	s_axi_wdata[20] = 1'b0;
end 
// s_axi_wdata[ 19 ]
initial
begin
	s_axi_wdata[19] = 1'b0;
end 
// s_axi_wdata[ 18 ]
initial
begin
	s_axi_wdata[18] = 1'b0;
end 
// s_axi_wdata[ 17 ]
initial
begin
	s_axi_wdata[17] = 1'b0;
end 
// s_axi_wdata[ 16 ]
initial
begin
	s_axi_wdata[16] = 1'b0;
end 
// s_axi_wdata[ 15 ]
initial
begin
	s_axi_wdata[15] = 1'b0;
end 
// s_axi_wdata[ 14 ]
initial
begin
	s_axi_wdata[14] = 1'b0;
end 
// s_axi_wdata[ 13 ]
initial
begin
	s_axi_wdata[13] = 1'b0;
end 
// s_axi_wdata[ 12 ]
initial
begin
	s_axi_wdata[12] = 1'b0;
end 
// s_axi_wdata[ 11 ]
initial
begin
	s_axi_wdata[11] = 1'b0;
end 
// s_axi_wdata[ 10 ]
initial
begin
	s_axi_wdata[10] = 1'b0;
end 
// s_axi_wdata[ 9 ]
initial
begin
	s_axi_wdata[9] = 1'b0;
end 
// s_axi_wdata[ 8 ]
initial
begin
	s_axi_wdata[8] = 1'b0;
end 
// s_axi_wdata[ 7 ]
initial
begin
	s_axi_wdata[7] = 1'b0;
end 
// s_axi_wdata[ 6 ]
initial
begin
	s_axi_wdata[6] = 1'b0;
end 
// s_axi_wdata[ 5 ]
initial
begin
	s_axi_wdata[5] = 1'b0;
end 
// s_axi_wdata[ 4 ]
initial
begin
	s_axi_wdata[4] = 1'b0;
end 
// s_axi_wdata[ 3 ]
initial
begin
	s_axi_wdata[3] = 1'b0;
end 
// s_axi_wdata[ 2 ]
initial
begin
	s_axi_wdata[2] = 1'b0;
	s_axi_wdata[2] = #500000 1'b1;
	s_axi_wdata[2] = #499000 1'b0;
end 
// s_axi_wdata[ 1 ]
initial
begin
	s_axi_wdata[1] = 1'b0;
	s_axi_wdata[1] = #250000 1'b1;
	s_axi_wdata[1] = #250000 1'b0;
	s_axi_wdata[1] = #250000 1'b1;
	s_axi_wdata[1] = #249000 1'b0;
end 
// s_axi_wdata[ 0 ]
initial
begin
	repeat(3)
	begin
		s_axi_wdata[0] = 1'b0;
		s_axi_wdata[0] = #125000 1'b1;
		# 125000;
	end
	s_axi_wdata[0] = 1'b0;
	s_axi_wdata[0] = #125000 1'b1;
	s_axi_wdata[0] = #124000 1'b0;
end 
// s_axi_wstrb[ 3 ]
initial
begin
	s_axi_wstrb[3] = 1'b0;
	s_axi_wstrb[3] = #600000 1'b1;
	s_axi_wstrb[3] = #399000 1'b0;
end 
// s_axi_wstrb[ 2 ]
initial
begin
	s_axi_wstrb[2] = 1'b0;
	s_axi_wstrb[2] = #300000 1'b1;
	s_axi_wstrb[2] = #300000 1'b0;
	s_axi_wstrb[2] = #300000 1'b1;
	s_axi_wstrb[2] = #99000 1'b0;
end 
// s_axi_wstrb[ 1 ]
initial
begin
	repeat(3)
	begin
		s_axi_wstrb[1] = 1'b0;
		s_axi_wstrb[1] = #150000 1'b1;
		# 150000;
	end
	s_axi_wstrb[1] = 1'b0;
end 
// s_axi_wstrb[ 0 ]
initial
begin
	repeat(6)
	begin
		s_axi_wstrb[0] = 1'b0;
		s_axi_wstrb[0] = #75000 1'b1;
		# 75000;
	end
	s_axi_wstrb[0] = 1'b0;
	s_axi_wstrb[0] = #75000 1'b1;
	s_axi_wstrb[0] = #24000 1'b0;
end 

// s_axi_wvalid
initial
begin
	s_axi_wvalid = 1'b0;
	s_axi_wvalid = #550000 1'b1;
	s_axi_wvalid = #449000 1'b0;
end 

cyNet_vlg_sample_tst tb_sample (
	.axis_in_data(axis_in_data),
	.axis_in_data_valid(axis_in_data_valid),
	.s_axi_aclk(s_axi_aclk),
	.s_axi_araddr(s_axi_araddr),
	.s_axi_aresetn(s_axi_aresetn),
	.s_axi_arprot(s_axi_arprot),
	.s_axi_arvalid(s_axi_arvalid),
	.s_axi_awaddr(s_axi_awaddr),
	.s_axi_awprot(s_axi_awprot),
	.s_axi_awvalid(s_axi_awvalid),
	.s_axi_bready(s_axi_bready),
	.s_axi_rready(s_axi_rready),
	.s_axi_wdata(s_axi_wdata),
	.s_axi_wstrb(s_axi_wstrb),
	.s_axi_wvalid(s_axi_wvalid),
	.sampler_tx(sampler)
);

cyNet_vlg_check_tst tb_out(
	.axis_in_data_ready(axis_in_data_ready),
	.intr(intr),
	.s_axi_arready(s_axi_arready),
	.s_axi_awready(s_axi_awready),
	.s_axi_bresp(s_axi_bresp),
	.s_axi_bvalid(s_axi_bvalid),
	.s_axi_rdata(s_axi_rdata),
	.s_axi_rresp(s_axi_rresp),
	.s_axi_rvalid(s_axi_rvalid),
	.s_axi_wready(s_axi_wready),
	.sampler_rx(sampler)
);
endmodule

